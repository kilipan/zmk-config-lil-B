#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define APT 0
#define NUM 1
#define NAV 2
#define SYM 3
#define FUN 4


&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC LSHFT RSHFT>;
};

/ {
    macros {
        macro_shiftable_sch: macro_shiftable_sch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp S>
                , <&macro_release &kp RSHIFT>
                , <&macro_tap &kp C &kp H>
                ;
            tap-ms = <10>;
        };
        macro_de_ae: macro_de_ae {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp DQT>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp A>                   
                ;
            tap-ms = <10>;
        };
        macro_de_oe: macro_de_oe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp DQT>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp O>                   
                ;
            tap-ms = <10>;
        };
        macro_de_ue: macro_de_ue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp DQT>
                , <&macro_release &kp RALT>
                , <&macro_tap &kp U>                   
                ;
            tap-ms = <10>;
        };
        macro_de_sz: macro_de_sz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp RALT>
                , <&macro_tap &kp S>
                , <&macro_release &kp RALT>
                ;
            tap-ms = <10>;
        };
    };
};

/ {
    behaviors {
        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <4 5 6 7 12 13 14 15 16 17 18 19>;
        };
        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
            // opposite side hand keys
            hold-trigger-key-positions = <0 1 2 3 8 9 10 11 16 17 18 19>;
        };

        my_lt: my_layer_taps {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <160>;
            quick-tap-ms = <100>;
            bindings = <&mo &kp>, <&kp>;
        };
        dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};


#define COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
};
#define SLOWCOMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <40>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
};
#define TCOMBO(NAME, BINDINGS, KEYPOS, TIMEOUT) \
combo_##NAME { \
    timeout-ms = <TIMEOUT>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <0>; \
};
#define ALL_COMBO(NAME, BINDINGS, KEYPOS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
};
#define LAYER_COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
combo_##NAME { \
    timeout-ms = <20>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
};

#define COMBOS_TOP_ROW(LTPR, LTRM, LTMI, RTIM, RTMR, RTRP) \
	SLOWCOMBO(_ltpr, LTPR, 0 1) \
	COMBO(_ltrm, LTRM, 1 2) \
	COMBO(_ltmi, LTMI, 2 3) \
	COMBO(_rtim, RTIM, 4 5) \
	COMBO(_rtmr, RTMR, 5 6) \
	SLOWCOMBO(_rtrp, RTRP, 6 7)
#define COMBOS_BOT_ROW(LBPR, LBRM, LBMI, RBIM, RBMR, RBRP) \
	SLOWCOMBO(_lbpr, LBPR, 8 9) \
	COMBO(_lbrm, LBRM, 9 10) \
	COMBO(_lbmi, LBMI, 10 11) \
	COMBO(_rbim, RBIM, 12 13) \
	COMBO(_rbmr, RBMR, 13 14) \
	SLOWCOMBO(_rbrp, RBRP, 14 15)


//  ________________________________________________
// |   0 |   1 |   2 |   3 ||   4 |   5 |   6 |   7 |
// |   8 |   9 |  10 |  11 ||  12 |  13 |  14 |  15 |
// |     |    16     |  17 ||  18 |     19    |     |
// --------------------------------------------------

/{
    combos {
        compatible = "zmk,combos";
/* alphas */
                     //  0+1    1+2    2+3    4+5      5+6      6+7
        COMBOS_TOP_ROW(&kp J, &kp M, &kp B, &kp BSPC, &dotcol, &kp SLASH)
        COMBOS_BOT_ROW(&kp Q, &kp V, &kp F, &kp ENTER, &comsem, &kp MINUS)
                     //  8+9    9+10  10+11  12+13    13+14    14+15

/* usually on base layer */
        COMBO(x, &kp X, 1 9)
        COMBO(g, &kp G, 2 10)
        COMBO(k, &kp K, 3 11)
        COMBO(y, &kp Y, 4 12)
        COMBO(p, &kp P, 1 11)
        COMBO(shiftablesch, &macro_shiftable_sch, 1 3)
        ALL_COMBO(esc, &kp ESC, 9 11)
        ALL_COMBO(minus, &kp MINUS, 1 10)
        ALL_COMBO(slash, &kp SLASH, 6 13)
/* numbers */
        LAYER_COMBO(L0, &kp N0, 1 2, 1)
        LAYER_COMBO(L9, &kp N9, 9 10, 1)
        LAYER_COMBO(L8, &kp N8, 2 3, 1)
        LAYER_COMBO(L7, &kp N7, 10 11, 1)
        LAYER_COMBO(R7, &kp N7, 12 13, 1)
        LAYER_COMBO(R8, &kp N8, 4 5, 1)
        LAYER_COMBO(R9, &kp N9, 13 14, 1)
        LAYER_COMBO(R0, &kp N0, 5 6, 1)
        LAYER_COMBO(Lplus, &kp PLUS, 2 11, 1)
        LAYER_COMBO(Rplus, &kp PLUS, 5 12, 1)
/* umlauts */
        COMBO(ae, &macro_de_ae, 15 18)
        COMBO(oe, &macro_de_oe, 5 18)
        COMBO(ue, &macro_de_ue, 6 18)
        COMBO(sz, &macro_de_sz, 1 17)
/* parentheticals */
        LAYER_COMBO(lbrc, &kp LBRC, 1 9, 3)
        LAYER_COMBO(lbkt, &kp LBKT, 2 10, 3)
        LAYER_COMBO(lpar, &kp LPAR, 3 11, 3)
        LAYER_COMBO(lt, &kp LT, 1 11, 3)
        LAYER_COMBO(rt, &kp GT, 6 12, 3)
        LAYER_COMBO(rpar, &kp RPAR, 4 12, 3)
        LAYER_COMBO(rbkt, &kp RBKT, 5 13, 3)
        LAYER_COMBO(rbrc, &kp RBRC, 6 14, 3)
/* caps */
        COMBO(caps, &caps_word, 3 4)
        COMBO(capslock, &kp CAPSLOCK, 1 6)
/* deletion */
        SLOWCOMBO(del, &kp DEL, 5 7)
        COMBO(delword, &kp LC(BSPC), 4 6)
    };
};

//  ________________________________________________
// |   0 |   1 |   2 |   3 ||   4 |   5 |   6 |   7 |
// |   8 |   9 |  10 |  11 ||  12 |  13 |  14 |  15 |
// |     |    16     |  17 ||  18 |     19    |     |
//  ------------------------------------------------



/ {
    keymap {
        compatible = "zmk,keymap";

        aptmak {
            bindings = <
                &kp J          &kp L          &kp D          &kp Z              &kp W          &kp O          &kp U          &dotcol
                &hl LCTRL R    &hl LALT N     &hl LGUI T     &hl LSHFT H        &hr RSHFT C    &hr RGUI E     &hr LALT I     &hr RCTRL A
                                              &my_lt NUM SQT &my_lt NAV S   &my_lt SYM SPACE   &my_lt FUN TAB
            >;
        };
        numbers {
            bindings = <
                &dotcol        &kp N6         &kp N5         &kp N4             &kp N4         &kp N5         &kp N6         &dotcol
                &none          &kp N3         &kp N2         &kp N1             &kp N1         &kp N2         &kp N3         &none
                                              &trans         &trans             &kp E          &kp N0
            >;
        };
        navigation {
            bindings = <
                &sk LCTRL      &sk LALT       &sk LGUI       &sk LSHFT          &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT
                &none          &kp C_AC_COPY  &kp C_AC_CUT   &kp C_AC_PASTE     &kp HOME       &kp C_MUTE     &kp END        &none
                                              &trans         &trans             &kp C_VOL_DN   &kp C_VOL_UP
            >;
        };
        symbols {
            bindings = <
                &kp EXCL       &kp AT         &kp HASH       &kp DOLLAR         &kp AMPERSAND  &kp ASTERISK   &kp PERCENT    &kp CARET
                &none          &kp GRAVE      &kp DQT        &kp PLUS           &kp BACKSLASH  &kp PIPE       &kp EQUAL      &none
                                              &kp TILDE      &trans             &trans         &trans
            >;
        };
        function {
            bindings = <
                &bootloader    &kp F12        &kp F11        &kp F10            &kp F4         &kp F5         &kp F6         &none
                &out OUT_TOG   &kp F9         &kp F8         &kp F7             &kp F1         &kp F2         &kp F3         &none
                                              &bt BT_PRV     &bt BT_NXT         &bt BT_CLR_ALL &trans
            >;
        };

    };
};
